name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 并发控制：同一PR只运行最新的CI，取消之前的运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # 公共环境变量
  CI: true
  HF_TOKEN: ${{ secrets.HF_TOKEN }}
  SILICONCLOUD_API_KEY: ${{ secrets.SILICONCLOUD_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
  ALIBABA_API_KEY: ${{ secrets.ALIBABA_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  HF_ENDPOINT: https://hf-mirror.com

jobs:
  # 快速检查：代码质量和基础测试
  quick-check:
    name: Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
        clean: true
      timeout-minutes: 5
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '**/pyproject.toml'
      timeout-minutes: 10
      continue-on-error: false
      
    - name: Verify Python Installation
      run: |
        python --version
        pip --version
        which python
        which pip
      timeout-minutes: 2
      
    - name: Clear pip cache and install dependencies
      id: install-deps
      run: |
        echo "🧹 Clearing pip cache..."
        pip cache purge || echo "No cache to clear"
        echo "📦 Upgrading pip..."
        pip install --upgrade pip --no-cache-dir
        echo "📦 Installing basic dependencies..."
        pip install flake8 black isort --no-cache-dir
        echo "📦 Installing sage-common..."
        pip install -e packages/sage-common/ --no-deps --no-cache-dir
        echo "📦 Installing sage core package..."
        pip install -e packages/sage/ --no-deps --no-cache-dir
        echo "✅ Dependencies installed successfully"
      timeout-minutes: 10
        
    - name: Code Quality Checks
      run: |
        echo "🔍 Running code quality checks..."
        black --check --diff packages/ || echo "⚠️ Code formatting issues found"
        isort --check-only --diff packages/ || echo "⚠️ Import sorting issues found"
        flake8 packages/ --count --select=E9,F63,F7,F82 --show-source --statistics
      timeout-minutes: 2
        
    - name: Run Basic Import Tests
      id: basic-tests
      run: |
        echo "Running quick smoke tests..."
        python -c "import sage; print('SAGE core import successful, version:', sage.__version__)"
        python -c "import sage.common; print('sage.common import successful')"
        # 添加更多基础导入测试
        echo "Basic import tests passed ✅"
    
    - name: Run Issues Manager Tests
      run: |
        echo "Running issues manager automated tests..."
        sage dev test --issues-manager
        echo "Issues manager tests passed ✅"
        
    - name: Report Quick Check Failure
      if: failure()
      run: |
        echo "❌ Quick Check Failed - Collecting Diagnostic Information"
        echo "════════════════════════════════════════════════════════════════"
        
        echo "📋 Quick Check Environment Information:"
        echo "- Date: $(date)"
        echo "- Python: $(python --version)"
        echo "- Pip: $(pip --version)"
        echo "- Working Directory: $(pwd)"
        echo ""
        
        echo "📦 Installation Status:"
        if [ -d "packages/sage-common" ]; then
          echo "✅ sage-common directory exists"
          pip show isage-common || echo "❌ sage-common not installed"
        else
          echo "❌ sage-common directory missing"
        fi
        
        if [ -d "packages/sage" ]; then
          echo "✅ sage directory exists"
          pip show isage || echo "❌ sage not installed"
        else
          echo "❌ sage directory missing"
        fi
        echo ""
        
        echo "🐍 Python Import Status:"
        python -c "import sage; print('✅ SAGE import works')" || echo "❌ SAGE import failed"
        python -c "import sage.common; print('✅ sage.common import works')" || echo "❌ sage.common import failed"
        echo ""
        
        echo "📦 Installed Packages:"
        pip list | grep -E "(sage|black|flake8|isort)" || echo "No relevant packages found"
        echo ""
        
        echo "💾 System Resources:"
        echo "- Available disk space: $(df -h . | tail -1 | awk '{print $4}' || echo 'Unknown')"
        echo "- Memory usage: $(free -h | grep Mem || echo 'Unknown')"
        echo ""
        
        echo "🌐 Network Status:"
        timeout 5 curl -s https://pypi.org > /dev/null && echo "✅ PyPI reachable" || echo "❌ PyPI unreachable"
        echo ""
        
        echo "📁 Directory Structure:"
        ls -la packages/ || echo "Cannot list packages directory"
        echo ""
        
        echo "════════════════════════════════════════════════════════════════"
        echo "❌ End of quick check failure diagnostic report"

  # 完整测试（仅在快速检查通过后运行）
  full-test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: quick-check
    timeout-minutes: 60
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
        clean: true
      timeout-minutes: 8
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: '**/pyproject.toml'
      timeout-minutes: 10
      continue-on-error: false
      
    - name: Verify Python Installation
      run: |
        python --version
        pip --version
      timeout-minutes: 2
      
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        use-mamba: true
        auto-activate-base: false
      timeout-minutes: 10
        
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
      timeout-minutes: 10
        
    - name: Install SAGE (Test Mode)
      id: install-sage
      shell: bash -l {0}
      env:
        CI: true
        DEBIAN_FRONTEND: noninteractive  # 避免apt交互
        # PYTHONNOUSERSITE: 1  # 注释掉以提高runner测试速度
        PIP_NO_INPUT: 1  # 禁用pip交互
        PIP_DISABLE_PIP_VERSION_CHECK: 1  # 禁用pip版本检查
        PIP_DEFAULT_TIMEOUT: 600  # pip安装超时设置为10分钟  
        PIP_CACHE_DIR: /tmp/pip-cache  # 设置pip缓存目录
        PIP_PREFER_BINARY: 1  # 优先使用二进制包
        PIP_NO_BUILD_ISOLATION: 1  # 禁用构建隔离以加速安装
        SAGE_ENV_NAME: sage  # 设置默认环境名
        CONDA_ALWAYS_YES: true  # 自动同意conda操作
      run: |
        echo "🚀 Starting SAGE installation..."
        echo "📋 Environment Information:"
        echo "- Date: $(date)"
        echo "- Python: $(python --version)"
        echo "- Conda: $(conda --version)"
        echo "- Available disk space: $(df -h . | tail -1 | awk '{print $4}')"
        echo "- Memory: $(free -h | grep Mem | awk '{print $2 " total, " $7 " available"}')"
        echo "- CPU cores: $(nproc)"
        echo ""
        
        # 设置错误捕获
        set -e
        trap 'exit_code=$?; echo "❌ Installation failed with exit code $exit_code"; exit $exit_code' ERR
        
        echo "🔧 Making quickstart.sh executable..."
        chmod +x ./quickstart.sh
        
        echo "🎯 Starting SAGE installation with detailed logging..."
        if ! ./quickstart.sh --dev --conda --yes; then
          echo "❌ SAGE installation failed!"
          exit 1
        fi
        
        echo "✅ SAGE installation completed successfully"
      timeout-minutes: 60  # 增加到60分钟以处理大型依赖
      
    - name: Report Installation Failure
      if: failure() && (steps.install-sage.outcome == 'failure' || steps.install-sage.conclusion == 'failure')
      shell: bash -l {0}
      run: |
        echo "❌ SAGE Installation Failed - Collecting Diagnostic Information"
        echo "════════════════════════════════════════════════════════════════"
        
        echo "📋 System Information:"
        echo "- Date: $(date)"
        echo "- Hostname: $(hostname)"
        echo "- User: $(whoami)"
        echo "- Working Directory: $(pwd)"
        echo "- Shell: $SHELL"
        echo ""
        
        echo "🐍 Python Environment:"
        python --version || echo "Python not available"
        pip --version || echo "Pip not available"
        which python || echo "Python executable not found"
        which pip || echo "Pip executable not found"
        echo ""
        
        echo "🐍 Conda Environment:"
        conda --version || echo "Conda not available"
        conda info --envs || echo "Cannot list conda environments"
        echo ""
        
        echo "💾 System Resources:"
        echo "- Available disk space: $(df -h . | tail -1 | awk '{print $4}' || echo 'Unknown')"
        echo "- Memory usage: $(free -h | grep Mem || echo 'Unknown')"
        echo "- CPU cores: $(nproc || echo 'Unknown')"
        echo "- Load average: $(uptime || echo 'Unknown')"
        echo ""
        
        echo "📁 Directory Contents:"
        ls -la . || echo "Cannot list directory"
        echo ""
        
        echo "📄 Installation Log (last 100 lines):"
        if [ -f "install.log" ]; then
          echo "Found install.log:"
          tail -100 install.log || echo "Cannot read install.log"
        else
          echo "install.log not found"
        fi
        echo ""
        
        echo "🔍 Package Installation Status:"
        echo "Checking SAGE packages:"
        for pkg in packages/sage-common packages/sage-kernel packages/sage-middleware packages/sage-libs packages/sage; do
          if [ -d "$pkg" ]; then
            echo "✅ $pkg directory exists"
            if [ -f "$pkg/pyproject.toml" ]; then
              echo "   - Has pyproject.toml"
            fi
            if [ -f "$pkg/setup.py" ]; then
              echo "   - Has setup.py"
            fi
          else
            echo "❌ $pkg directory missing"
          fi
        done
        echo ""
        
        echo "📦 Installed Python Packages:"
        pip list | head -20 || echo "Cannot list pip packages"
        echo ""
        
        echo "🌐 Network Connectivity:"
        echo "Testing PyPI connectivity:"
        timeout 10 curl -s https://pypi.org > /dev/null && echo "✅ PyPI reachable" || echo "❌ PyPI unreachable"
        timeout 10 curl -s https://anaconda.org > /dev/null && echo "✅ Anaconda.org reachable" || echo "❌ Anaconda.org unreachable"
        echo ""
        
        echo "🔧 Process Information:"
        echo "Running processes:"
        ps aux | grep -E "(python|pip|conda)" | head -10 || echo "No relevant processes found"
        echo ""
        
        echo "📝 Environment Variables:"
        echo "Relevant environment variables:"
        env | grep -E "(PYTHON|PIP|CONDA|SAGE)" | sort || echo "No relevant environment variables"
        echo ""
        
        echo "════════════════════════════════════════════════════════════════"
        echo "❌ End of diagnostic report"
        echo "💡 Please review the above information to diagnose the installation failure"
        
    - name: Run Test Suite
      id: run-tests
      shell: bash -l {0}
      env:
        PIP_NO_INPUT: 1
      run: |
        echo "🧪 运行完整测试套件 (使用增强的 sage dev test 命令):"
        
        # 运行诊断
        echo "🔍 系统诊断..."
        sage dev test --diagnose
        
        # 运行完整测试套件
        echo "🧪 运行单元测试..."
        sage dev test --test-type unit --verbose --jobs 4 --timeout 300 --report "/tmp/unit_test_report.md"
        
        echo "🔗 运行集成测试..."
        sage dev test --test-type integration --verbose --jobs 2 --timeout 600 --report "/tmp/integration_test_report.md"
        
        # 运行 Issues Manager 测试
        echo "🔧 运行 Issues Manager 测试..."
        sage dev test --issues-manager --verbose
        
        echo "✅ 完整测试套件完成"
      timeout-minutes: 30
      
    - name: Report Test Failure
      if: failure() && (steps.run-tests.outcome == 'failure' || steps.run-tests.conclusion == 'failure')
      shell: bash -l {0}
      run: |
        echo "❌ Test Suite Failed - Collecting Diagnostic Information"
        echo "════════════════════════════════════════════════════════════════"
        
        echo "📋 Test Environment Information:"
        echo "- Date: $(date)"
        echo "- Working Directory: $(pwd)"
        echo ""
        
        echo "🐍 Python Environment Status:"
        conda activate sage || echo "Failed to activate sage environment"
        python --version || echo "Python not available"
        pip --version || echo "Pip not available"
        echo ""
        
        echo "📦 SAGE Package Status:"
        echo "Testing SAGE imports:"
        python -c "import sage; print('✅ SAGE version:', sage.__version__)" || echo "❌ SAGE import failed"
        python -c "import sage.common; print('✅ sage.common imported')" || echo "❌ sage.common import failed"
        python -c "import sage.kernel; print('✅ sage.kernel imported')" || echo "❌ sage.kernel import failed"
        python -c "import sage.libs; print('✅ sage.libs imported')" || echo "❌ sage.libs import failed"
        python -c "import sage.middleware; print('✅ sage.middleware imported')" || echo "❌ sage.middleware import failed"
        echo ""
        
        echo "🖥️ CLI Status:"
        sage --help > /dev/null && echo "✅ SAGE CLI working" || echo "❌ SAGE CLI failed"
        sage version && echo "✅ SAGE version command working" || echo "❌ SAGE version command failed"
        echo ""
        
        echo "📄 Test Logs and Reports:"
        if [ -f "ci_test_report.txt" ]; then
          echo "Found test report:"
          cat ci_test_report.txt || echo "Cannot read test report"
        else
          echo "Test report not found"
        fi
        echo ""
        
        echo "📁 Test Directory Contents:"
        if [ -d "tools/tests" ]; then
          echo "tools/tests directory contents:"
          ls -la tools/tests/ || echo "Cannot list test directory"
        else
          echo "tools/tests directory not found"
        fi
        echo ""
        
        echo "🔍 Recent Test Outputs:"
        echo "Searching for recent test files..."
        find . -name "*.log" -o -name "*test*" -o -name "pytest*" 2>/dev/null | head -10 || echo "No test files found"
        echo ""
        
        echo "💾 System Resources:"
        echo "- Memory usage: $(free -h | grep Mem || echo 'Unknown')"
        echo "- Disk space: $(df -h . | tail -1 | awk '{print $4}' || echo 'Unknown')"
        echo ""
        
        echo "📦 Installed Packages:"
        pip list | grep -E "(sage|pytest)" || echo "No SAGE or pytest packages found"
        echo ""
        
        echo "════════════════════════════════════════════════════════════════"
        echo "❌ End of test failure diagnostic report"
        echo "💡 Please review the above information to diagnose the test failure"

  # 提醒信息（总是运行）
  info:
    name: CI Summary Report
    runs-on: ubuntu-latest
    if: always()
    needs: [quick-check, full-test]
    
    steps:
    - name: CI Summary
      run: |
        echo "🏁 CI Pipeline Summary"
        echo "════════════════════════════════════════════════════════════════"
        echo "Pipeline completed at: $(date)"
        echo ""
        
        # 检查各个作业的状态
        echo "📊 Job Status Summary:"
        echo "- Quick Check: ${{ needs.quick-check.result }}"
        echo "- Full Test: ${{ needs.full-test.result }}"
        echo ""
        
        # 根据结果提供建议
        if [[ "${{ needs.quick-check.result }}" == "failure" ]]; then
          echo "❌ Quick Check failed:"
          echo "💡 This usually indicates basic setup or dependency issues"
          echo "💡 Check the 'Report Quick Check Failure' step for detailed diagnostics"
          echo ""
        fi
        
        if [[ "${{ needs.full-test.result }}" == "failure" ]]; then
          echo "❌ Full Test failed:"
          echo "💡 This could be due to installation timeout or complex dependencies"
          echo "💡 Check the 'Report Installation Failure' or 'Report Test Failure' steps"
          echo ""
        fi
        
        if [[ "${{ needs.quick-check.result }}" == "success" && "${{ needs.full-test.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          echo "🎉 SAGE is ready for deployment"
        fi
        
        echo "════════════════════════════════════════════════════════════════"
    
  